SHELL=/bin/sh


########################################################
# Makefile flags and defintions

BINARYNAME = bittree_unit_test.x

MAKEFILE     = Makefile
MAKEFILES    = $(MAKEFILE) Makefile.site

include Makefile.site

# Default shell commands
RM ?= /bin/rm

# Use C++11 standard, flags differ by compiler
# -MMD generates a dependecy list for each file as a side effect
ifeq ($(CXXCOMPNAME),gnu)
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD
else ifeq ($(CXXCOMPNAME), pgi)
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD
else ifeq ($(CXXCOMPNAME), ibm)
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD
else ifeq ($(CXXCOMPNAME), llvm)
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD
else
$(info $(CXXCOMPNAME) compiler not yet supported.)
endif


# Combine all compiler and linker flags
CXXFLAGS = $(CXXFLAGS_STD) $(CXXFLAGS_PROD) -Isrc -I.
LDFLAGS  = $(LDFLAGS_STD)


# Add code coverage flags
ifeq ($(CODECOVERAGE), true)
CXXFLAGS += $(CXXFLAGS_COV)
LDFLAGS  += $(LDFLAGS_COV)
endif


# List of sources, objects, and dependencies
C_SRCS    = test.cpp

C_OBJS    = $(addsuffix .o, $(basename $(notdir $(C_SRCS))))
DEPS      = $(C_OBJS:.o=.d)

# Use vpath as suggested here: http://make.mad-scientist.net/papers/multi-architecture-builds/#single
vpath %.cpp $(sort $(dir $(C_SRCS)))


##########################################################
# Makefile commands:

.PHONY: default all clean test
default: $(BINARYNAME)
all:     $(BINARYNAME)
test:
	./$(BINARYNAME)

# If code coverage is being build into the test, remove any previous gcda files to avoid conflict.
$(BINARYNAME): $(C_OBJS) $(MAKEFILES)
ifeq ($(CODECOVERAGE), true)
	$(RM) -f *.gcda
endif
	$(CXXCOMP) -o $(BINARYNAME) $(C_OBJS) $(LDFLAGS)

%.o: %.cpp $(MAKEFILES)
	$(CXXCOMP) -c $(DEPFLAG) $(CXXFLAGS) -o $@ $<


# Clean removes all intermediate files
clean:
	$(RM) -f *.o
	$(RM) -f *.d
	$(RM) -f *.a
ifeq ($(CODECOVERAGE), true)
	$(RM) -f *.gcno
	$(RM) -f *.gcda
endif
	$(RM) -f lcov_temp.info


.PHONY: coverage
coverage:
ifeq ($(CODECOVERAGE), true)
	$(LCOV) -o lcov_temp.info -c -d .
	$(GENHTML)  -o Coverage_Report lcov_temp.info
else
	$(info Include --coverage in your setup line to enable code coverage.)
endif


# Include dependencies generated by compiler
-include $(DEPS)

