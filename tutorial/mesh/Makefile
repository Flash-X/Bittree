SHELL=/bin/sh
RM ?= /bin/rm


# Make sure these are correct: 
BASEDIR      = $(HOME)/Documents/bittree
BITTREE_LIB  = $(BASEDIR)/2d_lib
CXXCOMP      = mpicxx


########################################################
# Makefile flags and defintions
BINARYNAME    = bittree_mesh_tutorial.x
DEBUG = true

MAKEFILE     = Makefile
MAKEFILES    = $(MAKEFILE)

CXXFLAGS_PROD = -g -O2

CXXFLAGS_DEBUG = -g -O0 \
-Wall -Wextra -pedantic -Wconversion\
-Wno-vla-extension \
-Werror

CXXFLAGS_BITTREE = -I$(BITTREE_LIB)/include

LDFLAGS_STD = -lstdc++ -L$(BITTREE_LIB)/lib -lbittree -lmpi_cxx

# Use C++11 standard, flags differ by compiler
# -MMD generates a dependecy list for each file as a side effect
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD


# Combine all compiler and linker flags
ifeq ($(DEBUG),true)
CXXFLAGS = $(CXXFLAGS_STD) $(CXXFLAGS_DEBUG) $(CXXFLAGS_BITTREE)
else
CXXFLAGS = $(CXXFLAGS_STD) $(CXXFLAGS_PROD) $(CXXFLAGS_BITTREE)
endif
LDFLAGS  = $(LDFLAGS_STD)


# List of sources, objects, and dependencies
C_SRCS    = main.cpp


C_OBJS    = $(addsuffix .o, $(basename $(notdir $(C_SRCS))))
DEPS      = $(C_OBJS:.o=.d)

# Use vpath as suggested here: http://make.mad-scientist.net/papers/multi-architecture-builds/#single
vpath %.cpp $(sort $(dir $(C_SRCS)))


##########################################################
# Makefile commands:

.PHONY: default all clean test
default: $(BINARYNAME)
all:     $(BINARYNAME)
test: $(BINARYNAME)
	./$(BINARYNAME)

$(BINARYNAME): $(C_OBJS) $(MAKEFILES)
	$(CXXCOMP) -o $(BINARYNAME) $(C_OBJS) $(LDFLAGS)

%.o: %.cpp $(MAKEFILES)
	$(CXXCOMP) -c $(DEPFLAG) $(CXXFLAGS) -o $@ $<


# Clean removes all intermediate files
clean:
	$(RM) -f *.o
	$(RM) -f *.d

# Include dependencies generated by compiler
-include $(DEPS)

